REG: Register, denoted with $
PLT: Pointer to memory, denoted with &
LIT: Literal value, no sigil
LAB: Label, is text

hlt  none
mov  [REG] [LIT|PTR|REG]
jmp  [LIT|PTR|LAB]
jmpf [LIT]
jmpb [LIT]
cmp  [REG|LIT] [REG|LIT]
lt   [REG|LIT] [REG|LIT]
gt   ""
le   ""
ge   ""
jeq  [LIT|PTR|LAB]
jne  ""
aloc [LIT]
dalc [LIT]
add  [REG|LIT] [REG|LIT]
sub  ""
mul  ""
div  ""
igl  none

How registers, pointers and literals are denoted in memory
1. VM reads opcode
2. VM gets next byte from program
    If there is only one possible operand, the VM skips this step
3. byte value:
    0 -> literal (i32)
    1 -> pointer (u32)
    2 -> register (u8)
    _ -> (throws error)
4. VM parses next few bytes as necessary
